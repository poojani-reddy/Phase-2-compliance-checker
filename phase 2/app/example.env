import streamlit as st
from transformers import pipeline
import psycopg2

# Setting up environment variables (replace with your actual keys)
HF_API_KEY = "your_hugging_face_api_key"
TIMESCALE_SERVICE_URL = "postgres://postgres:password@localhost:5432/postgres"

# Streamlit app title
st.title("Hugging Face Text Generation App with TimescaleDB")

# Hugging Face pipeline setup
@st.cache_resource
def load_pipeline():
    return pipeline("text-generation", model="gpt2", use_auth_token=HF_API_KEY)

text_generator = load_pipeline()

# Database connection setup
@st.cache_resource
def connect_to_db():
    try:
        conn = psycopg2.connect(TIMESCALE_SERVICE_URL)
        return conn
    except Exception as e:
        st.error(f"Error connecting to the database: {e}")
        return None

conn = connect_to_db()

# Input from user
input_text = st.text_area("Enter your text:", placeholder="Type something...")

# Generate text
if st.button("Generate Text"):
    if input_text:
        with st.spinner("Generating..."):
            results = text_generator(input_text, max_length=50, num_return_sequences=1)
            generated_text = results[0]["generated_text"]
            st.write("Generated Text:")
            st.success(generated_text)
            
            # Save to database
            if conn:
                try:
                    with conn.cursor() as cur:
                        cur.execute("""
                            INSERT INTO text_generations (input_text, generated_text)
                            VALUES (%s, %s);
                        """, (input_text, generated_text))
                        conn.commit()
                        st.info("Generated text saved to database.")
                except Exception as e:
                    st.error(f"Error saving to database: {e}")
    else:
        st.warning("Please enter some text to generate.")

# Display saved generations from the database
if st.button("Show Saved Generations"):
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute("SELECT input_text, generated_text FROM text_generations;")
                rows = cur.fetchall()
                if rows:
                    for row in rows:
                        st.write(f"**Input:** {row[0]}")
                        st.write(f"**Generated:** {row[1]}")
                        st.write("---")
                else:
                    st.info("No saved generations found.")
        except Exception as e:
            st.error(f"Error retrieving data from the database: {e}")

# Closing database connection
if conn:
    conn.close()
